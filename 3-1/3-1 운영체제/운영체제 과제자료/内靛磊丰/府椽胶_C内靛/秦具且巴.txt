실습[4-1] 간단한 문자열 출력시스템콜 구현
시스템 콜하면 "Hello new System Call!!" 문자열 출력하기

1. 시스템 콜 이름과 번호할당 -> hellocall, 253
2. include/asm-i386/unistd.h 헤더파일에 '#define__NR_hellocall 253' 코드추가
3. 시스템 콜 테이블에 253번 시스템콜 추가하기 (등록)
4. 시스템 콜 처리함수 구현하기 -> kernel/hellocall.c 파일생성
5. 시스템 콜 처리함수 동작을 위해 커널 재컴파일 및 시스템 재부팅하기
6. 시스템 콜 호출을 위해 응용프로그램 작성 -> app_hellocall.c / gcc컴파일하기
6_1. 컴파일할때 에러나면 20p의 오류해결법 보기
7. 응용프로그램 실행 -> ./app_hellocall
------------------------------------------------------------------------
실습[4-2] 인자가 있는 시스템콜 구현
두개의 정수값을 더하여 결과값을 반환하는 간단한 시스템콜

1. 시스템 콜 이름과 번호할당 -> addcall, 254
2. include/asm-i386/unistd.h 헤더파일에 '#define__NR_addcall 254' 코드추가
3. 시스템 콜 테이블에 254번 시스템콜 추가하기 (등록)
4. 시스템 콜 처리함수 구현하기 -> kernel/addcall.c 파일생성
5. 시스템 콜 처리함수 동작을 위해 커널 재컴파일 및 시스템 재부팅하기
6. 시스템 콜 호출을 위해 응용프로그램 작성 -> app_addcall.c / gcc컴파일하기
7. 응용프로그램 실행 -> ./app_addcall
------------------------------------------------------------------------
실습[4-3] 모듈 로드/언로드 실습
모듈 프로그램을 만들고 insmod 명령을 실행하면 모듈이 메모리에 적재(로드), 
rmmod 명령을 실핼하면 모듈이 `제거(언로드)되는 프로그램. 

1. 모듈 소스코드 작성-> hellomodule.c
2. Makefile 소스작성 -> 모듈을 컴파일하는 기능을 가진 소스코드이다.
3. 모듈 컴파일
4. 모듈 적재-> insmod hellomodule.o / 출력결과 확인
5. 모듈 제거-> rmmod hellomodule / 출력결과 확인
------------------------------------------------------------------------
실습[4-4] 모듈을 이용한 시스템 콜의 구현
시스템 콜을 일으킨 프로세스(응용프로그램)와 이 프로세스의 부모프로세스의 PID값을 커널로부터 반환받아 출력하기

1. 모듈 소스코드 작성 -> mygetpid.c
2. Makefile 소스작성 -> 모듈을 컴파일하는 기능을 가진 소스코드이다.
3. 모듈 컴파일
4. 모듈 적재-> insmod mygetpid.o
5. 사용자 응용프로그램 작성 -> app_mygetpid.c
6. gcc컴파일 후 실행결과 확인
7. 모듈 제거(rmmod)하고 다시 응용프로그램 수행후 결과확인
