Chap 6. 데이터 로딩, 저장, 파일형식

6.1 텍스트 파일포맷으로 읽고 쓰기

>>> from __future__ import division
>>> from numpy.random import randn
>>> import numpy as np
>>> import os
>>> import sys
>>> import matplotlib.pyplot as plt
>>> np.random.seed(12345)
>>> plt.rc('figure', figsize=(10, 6))
>>> from pandas import Series, DataFrame
>>> import pandas as pd
>>> np.set_printoptions(precision=4)
>>> df = pd.read_csv('ch06/ex1.csv')
>>> df
   a   b   c   d message
0  1   2   3   4   hello
1  5   6   7   8   world
2  9  10  11  12     foo
>>> pd.read_table('ch06/ex1.csv', sep=',')
__main__:1: FutureWarning: read_table is deprecated, use read_csv instead.
   a   b   c   d message
0  1   2   3   4   hello
1  5   6   7   8   world
2  9  10  11  12     foo

>>> pd.read_csv('ch06/ex2.csv', header=None)
   0   1   2   3      4
0  1   2   3   4  hello
1  5   6   7   8  world
2  9  10  11  12    foo
>>> pd.read_csv('ch06/ex2.csv', names=['a', 'b', 'c', 'd', 'message'])
   a   b   c   d message
0  1   2   3   4   hello
1  5   6   7   8   world
2  9  10  11  12     foo
>>> names = ['a', 'b', 'c', 'd', 'message']
>>> pd.read_csv('ch06/ex2.csv', names=names, index_col='message')
         a   b   c   d
message
hello    1   2   3   4
world    5   6   7   8
foo      9  10  11  12
>>> parsed = pd.read_csv('ch06/csv_mindex.csv', index_col=['key1', 'key2'])
>>> parsed
           value1  value2
key1 key2
one  a          1       2
     b          3       4
     c          5       6
     d          7       8
two  a          9      10
     b         11      12
     c         13      14
     d         15      16
>>> list(open('ch06/ex3.txt'))
['            A         B         C\n', 'aaa -0.264438 -1.026059 -0.619500\n', 'bbb  0.927272  0.302904 -0.032399\n', 'ccc -0.264273 -0.386314 -0.217601\n', 'ddd -0.871858 -0.348382  1.100491\n']
>>> result = pd.read_table('ch06/ex3.txt', sep='\s+')
>>> result
            A         B         C
aaa -0.264438 -1.026059 -0.619500
bbb  0.927272  0.302904 -0.032399
ccc -0.264273 -0.386314 -0.217601
ddd -0.871858 -0.348382  1.100491
>>> pd.read_csv('ch06/ex4.csv', skiprows=[0, 2, 3])
   a   b   c   d message
0  1   2   3   4   hello
1  5   6   7   8   world
2  9  10  11  12     foo
>>> result = pd.read_csv('ch06/ex5.csv')
>>> result
  something  a   b     c   d message
0       one  1   2   3.0   4     NaN
1       two  5   6   NaN   8   world
2     three  9  10  11.0  12     foo
>>> pd.isnull(result)
   something      a      b      c      d  message
0      False  False  False  False  False     True
1      False  False  False   True  False    False
2      False  False  False  False  False    False
>>> result = pd.read_csv('ch06/ex5.csv', na_values=['foo'])
>>> result
  something  a   b     c   d message
0       one  1   2   3.0   4     NaN
1       two  5   6   NaN   8   world
2     three  9  10  11.0  12     NaN
>>> sentinels = {'message': ['foo', 'NA'], 'something': ['two']}
>>> pd.read_csv('ch06/ex5.csv', na_values=sentinels)
  something  a   b     c   d message
0       one  1   2   3.0   4     NaN
1       NaN  5   6   NaN   8   world
2     three  9  10  11.0  12     NaN

6.1.1 텍스트 파일 조금씩 읽어오기 (Reading text files in pieces)

>>> result = pd.read_csv('ch06/ex6.csv')
>>> result
           one       two     three      four key
0     0.467976 -0.038649 -0.295344 -1.824726   L
1    -0.358893  1.404453  0.704965 -0.200638   B
2    -0.501840  0.659254 -0.421691 -0.057688   G
3     0.204886  1.074134  1.388361 -0.982404   R
4     0.354628 -0.133116  0.283763 -0.837063   Q
5     1.817480  0.742273  0.419395 -2.251035   Q
6    -0.776764  0.935518 -0.332872 -1.875641   U
7    -0.913135  1.530624 -0.572657  0.477252   K
8     0.358480 -0.497572 -0.367016  0.507702   S
9    -1.740877 -1.160417 -1.637830  2.172201   G
10    0.240564 -0.328249  1.252155  1.072796   8
11    0.764018  1.165476 -0.639544  1.495258   R
12    0.571035 -0.310537  0.582437 -0.298765   1
13    2.317658  0.430710 -1.334216  0.199679   P
14    1.547771 -1.119753 -2.277634  0.329586   J
15   -1.310608  0.401719 -1.000987  1.156708   E
16   -0.088496  0.634712  0.153324  0.415335   B
17   -0.018663 -0.247487 -1.446522  0.750938   A
18   -0.070127 -1.579097  0.120892  0.671432   F
19   -0.194678 -0.492039  2.359605  0.319810   H
20   -0.248618  0.868707 -0.492226 -0.717959   W
21   -1.091549 -0.867110 -0.647760 -0.832562   C
22    0.641404 -0.138822 -0.621963 -0.284839   C
23    1.216408  0.992687  0.165162 -0.069619   V
24   -0.564474  0.792832  0.747053  0.571675   I
25    1.759879 -0.515666 -0.230481  1.362317   S
26    0.126266  0.309281  0.382820 -0.239199   L
27    1.334360 -0.100152 -0.840731 -0.643967   6
28   -0.737620  0.278087 -0.053235 -0.950972   J
29   -1.148486 -0.986292 -0.144963  0.124362   Y
...        ...       ...       ...       ...  ..
9970  0.633495 -0.186524  0.927627  0.143164   4
9971  0.308636 -0.112857  0.762842 -1.072977   1
9972 -1.627051 -0.978151  0.154745 -1.229037   Z
9973  0.314847  0.097989  0.199608  0.955193   P
9974  1.666907  0.992005  0.496128 -0.686391   S
9975  0.010603  0.708540 -1.258711  0.226541   K
9976  0.118693 -0.714455 -0.501342 -0.254764   K
9977  0.302616 -2.011527 -0.628085  0.768827   H
9978 -0.098572  1.769086 -0.215027 -0.053076   A
9979 -0.019058  1.964994  0.738538 -0.883776   F
9980 -0.595349  0.001781 -1.423355 -1.458477   M
9981  1.392170 -1.396560 -1.425306 -0.847535   H
9982 -0.896029 -0.152287  1.924483  0.365184   6
9983 -2.274642 -0.901874  1.500352  0.996541   N
9984 -0.301898  1.019906  1.102160  2.624526   I
9985 -2.548389 -0.585374  1.496201 -0.718815   D
9986 -0.064588  0.759292 -1.568415 -0.420933   E
9987 -0.143365 -1.111760 -1.815581  0.435274   2
9988 -0.070412 -1.055921  0.338017 -0.440763   X
9989  0.649148  0.994273 -1.384227  0.485120   Q
9990 -0.370769  0.404356 -1.051628 -1.050899   8
9991 -0.409980  0.155627 -0.818990  1.277350   W
9992  0.301214 -1.111203  0.668258  0.671922   A
9993  1.821117  0.416445  0.173874  0.505118   X
9994  0.068804  1.322759  0.802346  0.223618   H
9995  2.311896 -0.417070 -1.409599 -0.515821   L
9996 -0.479893 -0.650419  0.745152 -0.646038   E
9997  0.523331  0.787112  0.486066  1.093156   K
9998 -0.362559  0.598894 -1.843201  0.887292   G
9999 -0.096376 -1.012999 -0.657431 -0.573315   0

[10000 rows x 5 columns]
>>> pd.read_csv('ch06/ex6.csv', nrows=5)
        one       two     three      four key
0  0.467976 -0.038649 -0.295344 -1.824726   L
1 -0.358893  1.404453  0.704965 -0.200638   B
2 -0.501840  0.659254 -0.421691 -0.057688   G
3  0.204886  1.074134  1.388361 -0.982404   R
4  0.354628 -0.133116  0.283763 -0.837063   Q
>>> chunker = pd.read_csv('ch06/ex6.csv', chunksize=1000)
>>> chunker
<pandas.io.parsers.TextFileReader object at 0x0000013053777588>
>>> chunker = pd.read_csv('ch06/ex6.csv', chunksize=1000)
>>>
>>> tot = Series([])
>>> for piece in chunker:
...     tot = tot.add(piece['key'].value_counts(), fill_value=0)
...
>>> tot = tot.sort_values(ascending=False)
>>> tot[:10]
E    368.0
X    364.0
L    346.0
O    343.0
Q    340.0
M    338.0
J    337.0
F    335.0
K    334.0
H    330.0
dtype: float64

6.1.2 텍스트포맷으로 데이터 쓰기 (Writing data out to text format)

>>> data = pd.read_csv('ch06/ex5.csv')
>>> data
  something  a   b     c   d message
0       one  1   2   3.0   4     NaN
1       two  5   6   NaN   8   world
2     three  9  10  11.0  12     foo
>>> data.to_csv('ch06/out.csv')
>>> data.to_csv(sys.stdout, sep='|')
|something|a|b|c|d|message
0|one|1|2|3.0|4|
1|two|5|6||8|world
2|three|9|10|11.0|12|foo
>>> data.to_csv(sys.stdout, na_rep='NALL')
,something,a,b,c,d,message
0,one,1,2,3.0,4,NALL
1,two,5,6,NALL,8,world
2,three,9,10,11.0,12,foo
>>> data.to_csv(sys.stdout, index=False, header=False)
one,1,2,3.0,4,
two,5,6,,8,world
three,9,10,11.0,12,foo
>>> data.to_csv(sys.stdout, index=False, columns=['a', 'b', 'c'])
a,b,c
1,2,3.0
5,6,
9,10,11.0
>>> dates = pd.date_range('1/1/2000', periods=7)
>>> dates
DatetimeIndex(['2000-01-01', '2000-01-02', '2000-01-03', '2000-01-04',
               '2000-01-05', '2000-01-06', '2000-01-07'],
              dtype='datetime64[ns]', freq='D')
>>> ts = Series(np.arange(7), index=dates)
>>> ts.to_csv('ch06/tseries.csv')
__main__:1: FutureWarning: The signature of `Series.to_csv` was aligned to that of `DataFrame.to_csv`, and argument 'header' will change its default value from False to True: please pass an explicit value to suppress this warning.
>>> Series.from_csv('ch06/tseries.csv', parse_dates=True)
C:\Users\enjcat\AppData\Local\Programs\Python\Python37\lib\site-packages\pandas\core\series.py:4141: FutureWarning: from_csv is deprecated. Please use read_csv(...) instead. Note that some of the default arguments are different, so please refer to the documentation for from_csv when changing your function calls
  infer_datetime_format=infer_datetime_format)
2000-01-01    0
2000-01-02    1
2000-01-03    2
2000-01-04    3
2000-01-05    4
2000-01-06    5
2000-01-07    6
dtype: int64

6.1.3 수동으로 구분형식 처리 (Manually working with delimited formats)

>>> import csv
>>> f = open('ch06/ex7.csv')
>>> reader = csv.reader(f)
>>> for line in reader:
...     print(line)
...
['a', 'b', 'c']
['1', '2', '3']
['1', '2', '3', '4']
>>> lines = list(csv.reader(open('ch06/ex7.csv')))
>>> header, values = lines[0], lines[1:]
>>> header
['a', 'b', 'c']
>>> values
[['1', '2', '3'], ['1', '2', '3', '4']]
>>> data_dict = {h: v for h, v in zip(header, zip(*values))}
>>> data_dict
{'a': ('1', '1'), 'b': ('2', '2'), 'c': ('3', '3')}
>>> a = [1,2,3]
>>> b = [4,5,6]
>>> z = list(zip(a,b))
>>> print(z)
[(1, 4), (2, 5), (3, 6)]
>>> print(zip(*z))
<zip object at 0x000001306C656088>
>>> class my_dialect(csv.Dialect):
...     lineterminator = '\n'
...     delimiter = ';'
...     quotechar = '"'
...     quoting = csv.QUOTE_MINIMAL
...
>>> reader = csv.reader(f, dialect=my_dialect)
>>> with open('mydata.csv', 'w') as f:
...     writer = csv.writer(f, dialect=my_dialect)   # quoting=csv.QUOTE_NONE
...     writer.writerow(('one', 'two', 'three'))
...     writer.writerow(('1', '2', '3'))
...     writer.writerow(('4', '5', '6'))
...     writer.writerow(('7', '8', '9'))
...
14
6
6
6

JSON data

>>> obj = """
... {"name": "Wes",
...  "places_lived": ["United States", "Spain", "Germany"],
...  "pet": null,
...  "siblings": [{"name": "Scott", "age": 25, "pet": "Zuko"},
...               {"name": "Katie", "age": 33, "pet": "Cisco"}]
... }
... """
>>> import json
>>> result = json.loads(obj)
>>> result
{'name': 'Wes', 'places_lived': ['United States', 'Spain', 'Germany'], 'pet': None, 'siblings': [{'name': 'Scott', 'age': 25, 'pet': 'Zuko'}, {'name': 'Katie', 'age': 33, 'pet': 'Cisco'}]}
>>> asjson = json.dumps(result)
>>> asjson
'{"name": "Wes", "places_lived": ["United States", "Spain", "Germany"], "pet": null, "siblings": [{"name": "Scott", "age": 25, "pet": "Zuko"}, {"name": "Katie", "age": 33, "pet": "Cisco"}]}'
>>> siblings = DataFrame(result['siblings'], columns=['name', 'age'])
>>> siblings
    name  age
0  Scott   25
1  Katie   33
>>> siblings.to_json(orient='split')
'{"columns":["name","age"],"index":[0,1],"data":[["Scott",25],["Katie",33]]}'
>>> siblings.to_json(orient='index')
'{"0":{"name":"Scott","age":25},"1":{"name":"Katie","age":33}}'
>>> siblings.to_json(orient='records')
'[{"name":"Scott","age":25},{"name":"Katie","age":33}]'
>>> siblings.to_json(orient='table')
'{"schema": {"fields":[{"name":"index","type":"integer"},{"name":"name","type":"string"},{"name":"age","type":"integer"}],"primaryKey":["index"],"pandas_version":"0.20.0"}, "data": [{"index":0,"name":"Scott","age":25},{"index":1,"name":"Katie","age":33}]}'

6.1.5 XML and HTML, Web scraping

>>> from lxml.html import parse
>>> from urllib.request import urlopen
>>> parsed = parse(urlopen('http://finance.yahoo.com/q/op?s=AAPL+Options'))
>>> doc = parsed.getroot()
>>> parsed
<lxml.etree._ElementTree object at 0x000001306D7D2F08>
>>> links = doc.findall('.//a')
>>> links[15:20]
[<Element a at 0x1306d7e6778>, <Element a at 0x1306d7e6818>, <Element a at 0x1306d7e67c8>, <Element a at 0x1306d7e68b8>, <Element a at 0x1306d7e6908>]
>>> lnk = links[28]
>>> lnk
<Element a at 0x1306d7e6638>
>>> lnk.text_content()
'148.00'
>>> urls = [lnk.get('href') for lnk in doc.findall('.//a')]
>>> urls[-20:]
['/quote/AAPL/options?strike=225&straddle=false', 'https://help.yahoo.com/kb/index?page=content&y=PROD_FIN_DESK&locale=en_US&id=SLN2310', 'https://help.yahoo.com/kb/index?page=content&y=PROD_FIN_DESK&locale=en_US', 'https://yahoo.uservoice.com/forums/382977', 'http://info.yahoo.com/privacy/us/yahoo/', 'http://info.yahoo.com/relevantads/', 'http://info.yahoo.com/legal/us/yahoo/utos/utos-173.html', 'http://twitter.com/YahooFinance', 'http://facebook.com/yahoofinance', 'http://yahoofinance.tumblr.com', '/', '/watchlists', '/portfolios', '/screener', '/calendar', '/industries', '/videos/', '/news/', '/personal-finance', '/tech']
>>> tables = doc.findall('.//table')
>>> tables
[<Element table at 0x1306d7fdd68>, <Element table at 0x1306d7fddb8>]
>>> calls = tables[0]
>>> puts = tables[1]
>>> rows = calls.findall('.//tr')
>>> def _unpack(row, kind='td'):
...     elts = row.findall('.//%s' % kind)
...     return [val.text_content() for val in elts]
...
>>> _unpack(rows[0], kind='th')
['Contract Name', 'Last Trade Date', 'Strike', 'Last Price', 'Bid', 'Ask', 'Change', '% Change', 'Volume', 'Open Interest', 'Implied Volatility']
>>> _unpack(rows[1], kind='td')
['AAPL190412C00125000', '2019-04-08 11:45AM EDT', '125.00', '74.10', '74.60', '75.45', '+2.16', '+3.00%', '4', '2', '204.49%']
>>> from pandas.io.parsers import TextParser
>>>
>>> def parse_options_data(table):
...     rows = table.findall('.//tr')
...     header = _unpack(rows[0], kind='th')
...     data = [_unpack(r) for r in rows[1:]]
...     return TextParser(data, names=header).get_chunk()
...
>>> call_data = parse_options_data(calls)
>>> call_data[:10]
         Contract Name  ... Implied Volatility
0  AAPL190412C00125000  ...            204.49%
1  AAPL190412C00130000  ...            189.45%
2  AAPL190412C00135000  ...            175.00%
3  AAPL190412C00140000  ...             50.00%
4  AAPL190412C00145000  ...            143.36%
5  AAPL190412C00146000  ...            144.53%
6  AAPL190412C00147000  ...            141.80%
7  AAPL190412C00148000  ...            139.16%
8  AAPL190412C00149000  ...            132.91%
9  AAPL190412C00150000  ...            130.27%

[10 rows x 11 columns]
>>> put_data = parse_options_data(puts)
>>> put_data[:10]
         Contract Name  ... Implied Volatility
0  AAPL190412P00125000  ...            125.00%
1  AAPL190412P00130000  ...            118.75%
2  AAPL190412P00135000  ...            106.25%
3  AAPL190412P00140000  ...             96.88%
4  AAPL190412P00145000  ...             89.06%
5  AAPL190412P00146000  ...             87.50%
6  AAPL190412P00147000  ...             84.38%
7  AAPL190412P00149000  ...             81.25%
8  AAPL190412P00150000  ...             81.25%
9  AAPL190412P00152500  ...             75.00%

[10 rows x 11 columns]

>>> from lxml import objectify
>>> path = 'Performance_MNR.xml'
>>> parsed = objectify.parse(open(path))
>>> root = parsed.getroot()
>>> data = []
>>>
>>> skip_fields = ['PARENT_SEQ', 'INDICATOR_SEQ',
...                'DESIRED_CHANGE', 'DECIMAL_PLACES']
>>> for elt in root.INDICATOR:
...     el_data = {}
...     for child in elt.getchildren():
...         if child.tag in skip_fields:
...             continue
...         el_data[child.tag] = child.pyval # element.pyval attribute that returns the value as plain Python type
...     data.append(el_data)
...
>>> data
[{'AGENCY_NAME': 'Metro-North Railroad', 'INDICATOR_NAME': 'On-Time Performance (West of Hudson)', 'DESCRIPTION': 'Percent of commuter trains that arrive at their destinations within 5 minutes and 59 seconds of the scheduled time. West of Hudson services include the Pascack Valley and Port Jervis lines. Metro-North Railroad contracts with New Jersey Transit to operate service on these lines.\n', 'PERIOD_YEAR': 2008, 'PERIOD_MONTH': 1, 'CATEGORY': 'Service Indicators', 'FREQUENCY': 'M', 'INDICATOR_UNIT': '%', 'YTD_TARGET': 95.0, 'YTD_ACTUAL': 96.9, 'MONTHLY_TARGET': 95.0, 'MONTHLY_ACTUAL': 96.9}, {'AGENCY_NAME': 'Metro-North Railroad', 'INDICATOR_NAME': 'On-Time Performance (West of Hudson)', 'DESCRIPTION': 'Percent of commuter trains that arrive at their destinations within 5 minutes and 59 seconds of the scheduled time. West of Hudson services include the Pascack Valley and Port Jervis lines. Metro-North Railroad contracts with New Jersey Transit to operate service on these lines.\n', 'PERIOD_YEAR': 2008, 'PERIOD_MONTH': 2, 'CATEGORY': 'Service Indicators', 'FREQUENCY': 'M', 'INDICATOR_UNIT': '%', 'YTD_TARGET': 95.0, 'YTD_ACTUAL'
...

>>> perf = DataFrame(data)
>>> perf
               AGENCY_NAME            CATEGORY  ... YTD_ACTUAL YTD_TARGET
0     Metro-North Railroad  Service Indicators  ...       96.9         95
1     Metro-North Railroad  Service Indicators  ...         96         95
2     Metro-North Railroad  Service Indicators  ...       96.3         95
3     Metro-North Railroad  Service Indicators  ...       96.8         95
4     Metro-North Railroad  Service Indicators  ...       96.6         95
5     Metro-North Railroad  Service Indicators  ...       96.2         95
6     Metro-North Railroad  Service Indicators  ...       96.2         95
7     Metro-North Railroad  Service Indicators  ...       96.2         95
8     Metro-North Railroad  Service Indicators  ...       95.9         95
9     Metro-North Railroad  Service Indicators  ...         96         95
10    Metro-North Railroad  Service Indicators  ...       96.1         95
11    Metro-North Railroad  Service Indicators  ...         96         95
12    Metro-North Railroad  Service Indicators  ...       92.6       96.2
13    Metro-North Railroad  Service Indicators  ...       94.6       96.2
14    Metro-North Railroad  Service Indicators  ...       95.4       96.2
15    Metro-North Railroad  Service Indicators  ...       95.9       96.2
16    Metro-North Railroad  Service Indicators  ...       96.2       96.2
17    Metro-North Railroad  Service Indicators  ...       96.4       96.2
18    Metro-North Railroad  Service Indicators  ...       96.5       96.2
19    Metro-North Railroad  Service Indicators  ...       96.4       96.2
20    Metro-North Railroad  Service Indicators  ...       96.3       96.2
21    Metro-North Railroad  Service Indicators  ...       96.2       96.2
22    Metro-North Railroad  Service Indicators  ...       96.1       96.2
23    Metro-North Railroad  Service Indicators  ...         96       96.2
24    Metro-North Railroad  Service Indicators  ...         98       96.3
25    Metro-North Railroad  Service Indicators  ...       95.6       96.3
26    Metro-North Railroad  Service Indicators  ...       96.1       96.3
27    Metro-North Railroad  Service Indicators  ...       96.6       96.3
28    Metro-North Railroad  Service Indicators  ...       96.8       96.3
29    Metro-North Railroad  Service Indicators  ...       96.9       96.3
...                    ...                 ...  ...        ...        ...
1266  Metro-North Railroad  Service Indicators  ...      95.14
1267  Metro-North Railroad  Service Indicators  ...      95.38
1268  Metro-North Railroad  Service Indicators  ...       95.7
1269  Metro-North Railroad  Service Indicators  ...         96
1270  Metro-North Railroad  Service Indicators  ...      96.21
1271  Metro-North Railroad  Service Indicators  ...       96.5
1272  Metro-North Railroad  Service Indicators  ...      97.95         97
1273  Metro-North Railroad  Service Indicators  ...      98.92         97
1274  Metro-North Railroad  Service Indicators  ...      99.29         97
1275  Metro-North Railroad  Service Indicators  ...      99.47         97
1276  Metro-North Railroad  Service Indicators  ...      99.58         97
1277  Metro-North Railroad  Service Indicators  ...      98.19         97
1278  Metro-North Railroad  Service Indicators  ...      98.46         97
1279  Metro-North Railroad  Service Indicators  ...      98.69         97
1280  Metro-North Railroad  Service Indicators  ...       98.3         97
1281  Metro-North Railroad  Service Indicators  ...      97.55         97
1282  Metro-North Railroad  Service Indicators  ...      97.47         97
1283  Metro-North Railroad  Service Indicators  ...      96.84         97
1284  Metro-North Railroad  Service Indicators  ...        100         97
1285  Metro-North Railroad  Service Indicators  ...        100         97
1286  Metro-North Railroad  Service Indicators  ...      98.86         97
1287  Metro-North Railroad  Service Indicators  ...      98.76         97
1288  Metro-North Railroad  Service Indicators  ...      90.91         97
1289  Metro-North Railroad  Service Indicators  ...                    97
1290  Metro-North Railroad  Service Indicators  ...                    97
1291  Metro-North Railroad  Service Indicators  ...                    97
1292  Metro-North Railroad  Service Indicators  ...                    97
1293  Metro-North Railroad  Service Indicators  ...                    97
1294  Metro-North Railroad  Service Indicators  ...                    97
1295  Metro-North Railroad  Service Indicators  ...                    97

[1296 rows x 12 columns]

6.2 Binary data formats

>>> frame = pd.read_csv('ch06/ex1.csv')
>>> frame
   a   b   c   d message
0  1   2   3   4   hello
1  5   6   7   8   world
2  9  10  11  12     foo
>>> frame.to_pickle('ch06/frame_pickle')
>>> pd.read_pickle('ch06/frame_pickle')
   a   b   c   d message
0  1   2   3   4   hello
1  5   6   7   8   world
2  9  10  11  12     foo

6.2.1 Using HDF5 format

>>> store = pd.HDFStore('mydata.h5')
>>> store['obj1'] = frame
>>> store['obj1_col'] = frame['a']
>>> store
<class 'pandas.io.pytables.HDFStore'>
File path: mydata.h5

>>> store['obj1']
   a   b   c   d message
0  1   2   3   4   hello
1  5   6   7   8   world
2  9  10  11  12     foo
>>> store['obj1_col']
0    1
1    5
2    9
Name: a, dtype: int64
>>> store.close()
>>> os.remove('mydata.h5')

6.3 Interacting with HTML and Web APIs

>>> import requests
>>> url = 'http://search.twitter.com/search.json?q=python%20pandas'
>>> resp = requests.get(url)
>>> resp
<Response [410]>

6.4 Interacting with databases

>>> import sqlite3
>>>
>>> query = """
... CREATE TABLE test
... (a VARCHAR(20), b VARCHAR(20),
...  c REAL,        d INTEGER
... );"""
>>>
>>> con = sqlite3.connect(':memory:') # dbname을 넣어야 하나, :memory 의 경우 db를 메모리에 생성
>>> con.execute(query)
<sqlite3.Cursor object at 0x0000021B73856B90>
>>> con.commit()
>>> data = [('Atlanta', 'Georgia', 1.25, 6),
...         ('Tallahassee', 'Florida', 2.6, 3),
...         ('Sacramento', 'California', 1.7, 5)]
>>> stmt = "INSERT INTO test VALUES(?, ?, ?, ?)"
>>>
>>> con.executemany(stmt, data)
<sqlite3.Cursor object at 0x0000021B73856C00>
>>> con.commit()
>>> cursor = con.execute('select * from test')
>>> rows = cursor.fetchall()
>>> rows
[('Atlanta', 'Georgia', 1.25, 6), ('Tallahassee', 'Florida', 2.6, 3), ('Sacramento', 'California', 1.7, 5)]
>>> cursor.description
(('a', None, None, None, None, None, None), ('b', None, None, None, None, None, None), ('c', None, None, None, None, None, None), ('d', None, None, None, None, None, None))
>>> DataFrame(rows, columns=list(zip(*cursor.description))[0])
             a           b     c  d
0      Atlanta     Georgia  1.25  6
1  Tallahassee     Florida  2.60  3
2   Sacramento  California  1.70  5
>>> import pandas.io.sql as sql
>>> sql.read_sql('select * from test', con)
             a           b     c  d
0      Atlanta     Georgia  1.25  6
1  Tallahassee     Florida  2.60  3
2   Sacramento  California  1.70  5














































































